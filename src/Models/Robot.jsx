/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useControls } from "leva";

import * as THREE from "three";
import { useFrame } from "@react-three/fiber";

export default function Robot(props) {
  const group = useRef();
  const { scene, nodes, materials, animations } = useGLTF("/models/Robot.glb");
  const { actions } = useAnimations(animations, group);

  const [clicked, setClicked] = useState(false);

  const mixer = useRef();
  const idleAction = useRef(null);
  const danceAction = useRef(null);
  const isDancing = useRef(false);

  useEffect(() => {
    if (clicked) {
      playDeathAnimation();
    }
    if (animations.length > 0 && group.current) {
      mixer.current = new THREE.AnimationMixer(group.current);

      idleAction.current = mixer.current.clipAction(
        animations.find((clip) => clip.name === "Robot_Idle")
      );
      danceAction.current = mixer.current.clipAction(
        animations.find((clip) => clip.name === "Robot_Dance")
      );

      if (idleAction.current && !clicked) {
        idleAction.current.play();
      }

      return () => mixer.current?.stopAllAction();
    }
  }, [animations, clicked]);

  const playDanceAnimation = () => {
    if (danceAction.current && idleAction.current && mixer.current) {
      isDancing.current = true;

      danceAction.current.reset();
      danceAction.current.setEffectiveWeight(1);
      danceAction.current.crossFadeFrom(idleAction.current, 0.5, false);
      danceAction.current.play();

      const danceDuration = danceAction.current.getClip().duration;
      setTimeout(() => {
        if (idleAction.current) {
          idleAction.current.reset();
          idleAction.current.setEffectiveWeight(1);
          idleAction.current.crossFadeFrom(danceAction.current, 0.5, false);
          idleAction.current.play();
        }
        isDancing.current = false;
      }, danceDuration * 1000);
    }
  };

  useEffect(() => {
    const interval = setInterval(() => {
      if (!isDancing.current) {
        playDanceAnimation();
      }
    }, 8000);

    return () => clearInterval(interval);
  }, []);

  useFrame((_, delta) => {
    mixer.current?.update(delta);
  });

  const playDeathAnimation = () => {
    const action = actions["Robot_Death"];
    action.reset();
    action.setLoop(THREE.LoopOnce);
    action.clampWhenFinished = true;
    action.play();
  };

  // useEffect(() => {
  //   const action = actions["Robot_Dance"];
  //   if (clicked) {
  //     robot_death();

  //     actions.Robot_Idle.stop();
  //   } else {
  //     action.reset().fadeIn(0.1).play();

  //     action.crossFadeTo(actions["Robot_Idle"], 5);
  //     actions.Robot_Idle.play();
  //   }
  //   return () => {
  //     action.fadeOut(0.1);
  //   };
  // }, [clicked]);

  return (
    <group
      onClick={() => setClicked(!clicked)}
      scale={0.37}
      ref={group}
      {...props}
      dispose={null}
    >
      <group name="Scene">
        <group name="RobotArmature">
          <group name="HandL">
            <skinnedMesh
              name="Cylinder022"
              geometry={nodes.Cylinder022.geometry}
              material={materials.Main}
              skeleton={nodes.Cylinder022.skeleton}
            />
            <skinnedMesh
              name="Cylinder022_1"
              geometry={nodes.Cylinder022_1.geometry}
              material={materials.Grey}
              skeleton={nodes.Cylinder022_1.skeleton}
            />
          </group>
          <group name="HandR">
            <skinnedMesh
              name="Cylinder015"
              geometry={nodes.Cylinder015.geometry}
              material={materials.Main}
              skeleton={nodes.Cylinder015.skeleton}
            />
            <skinnedMesh
              name="Cylinder015_1"
              geometry={nodes.Cylinder015_1.geometry}
              material={materials.Grey}
              skeleton={nodes.Cylinder015_1.skeleton}
            />
          </group>
          <primitive castShadow object={nodes.Bone} />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/Robot.glb");
